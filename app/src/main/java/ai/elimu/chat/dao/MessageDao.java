package ai.elimu.chat.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import java.util.Calendar;
import org.literacyapp.chat.dao.converter.CalendarConverter;

import org.literacyapp.chat.model.Message;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE".
*/
public class MessageDao extends AbstractDao<Message, Long> {

    public static final String TABLENAME = "MESSAGE";

    /**
     * Properties of entity Message.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DeviceId = new Property(1, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property StudentId = new Property(2, String.class, "studentId", false, "STUDENT_ID");
        public final static Property StudentAvatar = new Property(3, String.class, "studentAvatar", false, "STUDENT_AVATAR");
        public final static Property TimeSent = new Property(4, long.class, "timeSent", false, "TIME_SENT");
        public final static Property Text = new Property(5, String.class, "text", false, "TEXT");
    }

    private final CalendarConverter timeSentConverter = new CalendarConverter();

    public MessageDao(DaoConfig config) {
        super(config);
    }
    
    public MessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DEVICE_ID\" TEXT NOT NULL ," + // 1: deviceId
                "\"STUDENT_ID\" TEXT," + // 2: studentId
                "\"STUDENT_AVATAR\" TEXT," + // 3: studentAvatar
                "\"TIME_SENT\" INTEGER NOT NULL ," + // 4: timeSent
                "\"TEXT\" TEXT NOT NULL );"); // 5: text
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Message entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getDeviceId());
 
        String studentId = entity.getStudentId();
        if (studentId != null) {
            stmt.bindString(3, studentId);
        }
 
        String studentAvatar = entity.getStudentAvatar();
        if (studentAvatar != null) {
            stmt.bindString(4, studentAvatar);
        }
        stmt.bindLong(5, timeSentConverter.convertToDatabaseValue(entity.getTimeSent()));
        stmt.bindString(6, entity.getText());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Message entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getDeviceId());
 
        String studentId = entity.getStudentId();
        if (studentId != null) {
            stmt.bindString(3, studentId);
        }
 
        String studentAvatar = entity.getStudentAvatar();
        if (studentAvatar != null) {
            stmt.bindString(4, studentAvatar);
        }
        stmt.bindLong(5, timeSentConverter.convertToDatabaseValue(entity.getTimeSent()));
        stmt.bindString(6, entity.getText());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Message readEntity(Cursor cursor, int offset) {
        Message entity = new Message( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // deviceId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // studentId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // studentAvatar
            timeSentConverter.convertToEntityProperty(cursor.getLong(offset + 4)), // timeSent
            cursor.getString(offset + 5) // text
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Message entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeviceId(cursor.getString(offset + 1));
        entity.setStudentId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStudentAvatar(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTimeSent(timeSentConverter.convertToEntityProperty(cursor.getLong(offset + 4)));
        entity.setText(cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Message entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Message entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Message entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
